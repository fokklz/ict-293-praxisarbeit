// Your grid breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
);

// Media breakpoint mixin
@mixin media-breakpoint-up($breakpoint, $grid-breakpoints: $grid-breakpoints) {
  $min-width: map-get($grid-breakpoints, $breakpoint);

  @if $min-width {
    @media (min-width: $min-width) {
      @content;
    }
  } @else {
    @warn "No value found for breakpoint `#{$breakpoint}`. "
            "This will result in no media query being generated.";
  }
}

// Media breakpoint-down mixin
@mixin media-breakpoint-down(
  $breakpoint,
  $grid-breakpoints: $grid-breakpoints
) {
  $max-width: map-get($grid-breakpoints, $breakpoint);

  @if $max-width {
    @media (max-width: $max-width) {
      @content;
    }
  } @else {
    @warn "No value found for breakpoint `#{$breakpoint}`. "
            "This will result in no media query being generated.";
  }
}

// Container mixin
@mixin make-container($breakpoints: $grid-breakpoints) {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;

  @each $breakpoint, $container-max-width in $breakpoints {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      @if $breakpoint != 'xs' {
        // Exclude setting max-width for the first breakpoint (0)
        max-width: $container-max-width;
      }
    }
  }
}

@mixin show-for($breakpoints: $grid-breakpoints) {
  @each $breakpoint, $value in $breakpoints {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      display: block;
    }
  }
}

@mixin hide-for($breakpoints: $grid-breakpoints) {
  @each $breakpoint, $value in $breakpoints {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      display: none;
    }
  }
}

@mixin hide-until($breakpoint, $value: block) {
  display: none !important; // Hide the element by default

  @if map-has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
      display: $value !important; // Show the element at the specified breakpoint
    }
  } @else {
    @warn "The breakpoint '#{$breakpoint}' is not defined.";
  }
}

@mixin show-until($breakpoint, $value: block) {
  display: $value !important; // Show the element by default

  @if map-has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
      display: none !important; // Hide the element at the specified breakpoint
    }
  } @else {
    @warn "The breakpoint '#{$breakpoint}' is not defined.";
  }
}
